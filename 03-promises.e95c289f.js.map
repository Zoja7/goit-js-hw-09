{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAGtC,SAASI,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAE3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KAELH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAG5BA,EAAM,G,CAqDbR,EAAKgB,iBAAiB,UA9CtB,SAAsBC,GACpBA,EAAMC,iBAGN,MAAMC,EAAYC,SAASjB,EAAWkB,OAChCC,EAAWF,SAAShB,EAAUiB,OAC9BE,EAAaH,SAASf,EAAOgB,OAG7BG,EAAW,GAGjB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,IAAK,CACnC,MAEMC,EAAUpB,EAFCmB,EAAI,EACPN,GAAaM,EAAI,GAAKH,GAGpCI,EACGC,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MAEjBV,EAAA8B,OAAOC,QAAQ,qBAAqBtB,QAAeC,OACnDsB,QAAQC,IAAI,uBAAqBxB,QAAiBC,OAChDR,EAAGgC,OAAO,IAEbC,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAElBV,EAAA8B,OAAOM,QAAQ,oBAAoB3B,QAAeC,OAClDsB,QAAQC,IAAI,sBAAoBxB,QAAeC,OAC/CR,EAAKgC,OAAO,IAGhBR,EAASW,KAAKT,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst form = document.querySelector('.form');\nconst firstDelay = document.querySelector('input[name=\"delay\"]');\nconst stepDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n// Function to create a promise with a random fulfillment or rejection\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n\n      if (shouldResolve) {\n\n        resolve({ position, delay });\n      } else {\n\n        reject({ position, delay });\n      }\n\n    }, delay);\n\n  });\n  \n}\n\n// Function to handle form submission\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n// Get form input values \n  const userDelay = parseInt(firstDelay.value);\n  const userStep = parseInt(stepDelay.value);// Calculate delay for each promise\n  const userAmount = parseInt(amount.value);\n\n//Create an empthy array to hold on the promises\n  const promises = [];\n\n//Create promises based on the form inputs\n  for (let i = 0; i < userAmount; i++) {\n    const position = i + 1;\n    const delay = userDelay + (i + 1) * userStep;\n    const promise = createPromise(position, delay);\n\n    promise\n      .then(({ position, delay }) => {\n\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        form.reset();   \n      })\n      .catch(({ position, delay }) => {\n\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        form.reset();  \n      })\n    \n    promises.push(promise);\n\n  }\n\n//I can something when all promises are settled using Promise.all\n  // Promise.all(promises)\n  //   .then(() => { \n  //     console.log(\"All promises have settled!\");\n  //   })\n  //   .catch((error) => { \n  //     console.error(\"Error in Promise.all:\", error);\n  //   })\n}\n\n//Add a submit event listener to the form\nform.addEventListener(\"submit\", handleSubmit);\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$stepDelay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","userDelay","parseInt","value","userStep","userAmount","promises","i","promise","then","Notify","success","console","log","reset","catch","failure","push"],"version":3,"file":"03-promises.e95c289f.js.map"}